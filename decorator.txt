#**Decorator: **

_It is a function that receives other function as parameter and extends its behavior without modifying it explicitly.  _

Wearing clothes is an example of using decorators. When you’re cold, you wrap yourself in a sweater. If you’re still cold with a sweater, you can wear a jacket on top. If it’s raining, you can put on a raincoat. All of these garments “extend” your basic behavior but aren’t part of you, and you can easily take off any piece of clothing whenever you don’t need it.

**Extending** a class is the first thing that comes to mind when you need to alter an object’s behavior. However, inheritance has several serious caveats that you need to be aware of.

Inheritance is static. You can’t alter the behavior of an existing object at run time. You can only replace the whole object with another one that’s created from a different subclass.

Subclasses can have just one parent class. In most languages, inheritance doesn’t let a class inherit behaviors of multiple classes at the same time.

When does a simple wrapper become the real decorator? When the wrapper implements the same interface as the wrapped object. That’s why from the client’s perspective these objects are identical. Make the wrapper’s reference field accept any object that follows that interface. This will let you cover an object in multiple wrappers, adding the combined behavior of all the wrappers to it.

[Where I got most of my insights](https://medium.com/@trekinbami/using-decorators-in-javascript-a44296e418c7 )
[Good text about abstraction] (https://eloquentjavascript.net/05_higher_order.html)
[Understanding High Order Functions] (https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad)